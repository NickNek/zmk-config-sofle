/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define MOVEMENT 1
#define NUMPAD 2
#define SYMBOLS 3
#define SERVICE 4

#define WAIT_MS 10
#define TAP_MS 10

/ {
    macros {
        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        };
        ae: ae { //TODO: adjust timing for äöü
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        };
        oe: oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
        ue: ue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        };
        _AE: _AE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
        _OE: _OE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        };
        _UE: _UE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        };
        ss: ss {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        };
        deg: deg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        };
        tick: tick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        };
        btick: btick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N0 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        };
        alt_f4: alt_f4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp F4>
                , <&macro_release &kp LALT>
                ;
        };
        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <WAIT_MS>;
            tap-ms = <TAP_MS>;
            bindings
                = <&macro_press   &kp LCTRL>
                , <&macro_tap     &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
};

#define MO_TOG(layer_mo, layer_tog) &mo_tog layer_mo layer_tog

/ {
    behaviors {
        ae_AE: ae_AE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ae>, <&_AE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        oe_OE: oe_OE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&oe>, <&_OE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ue_UE: ue_UE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ue>, <&_UE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fslh_bslh: fslh_bslh {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_SLASH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        qmark_excl: qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sqt_dqt: sqt_dqt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minus_under: minus_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        equal_hash: equal_hash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp HASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        plus_mult: plus_mult {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo0 { key-positions = < 7  8>; bindings = <&kp LT>;    timeout-ms = <50>; layers = <0>;};
        combo1 { key-positions = < 8  9>; bindings = <&kp GT>;    timeout-ms = <50>; layers = <0>;};
        combo2 { key-positions = <19 20>; bindings = <&kp LBKT>;  timeout-ms = <50>; layers = <0>;};
        combo3 { key-positions = <20 21>; bindings = <&kp RBKT>;  timeout-ms = <50>; layers = <0>;};
        combo4 { key-positions = <31 32>; bindings = <&kp LPAR>;  timeout-ms = <50>; layers = <0>;};
        combo5 { key-positions = <32 33>; bindings = <&kp RPAR>;  timeout-ms = <50>; layers = <0>;};
        combo6 { key-positions = <45 46>; bindings = <&kp LBRC>;  timeout-ms = <50>; layers = <0>;};
        combo7 { key-positions = <46 47>; bindings = <&kp RBRC>;  timeout-ms = <50>; layers = <0>;};

        combo8 { key-positions = <50 53>; bindings = <&caps_word>;  timeout-ms = <50>; layers = <0>;};  // double shift

        combo9 { key-positions = <42 54>; bindings = <&mo SERVICE>;  timeout-ms = <100>; layers = <0>;};  // left encoder and left big key
    };
};
    
/ {

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            display-name = "default";
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | //\   |
// |  TAB  |  Q  |  W  |  F   |  P   |  B   |                   |  J   |  L    |  U    |  Y   |   ?/! | '/"   |
// |  CAPS |  A  |  R  |  S   |  T   |  G   |                   |  M   |  N    |  E    |  I   |   O   | BKSPC |
// | LCTRL |  Z  |  X  |  C   |  D   |  V   |  PRINT |  | BREAK |  K   |  N    |  ,/;  |  ./: |   -/_ |  DEL  |
//               | WIN | ALT  |SYMBLS| LSHFT|  SPACE |  | RET*  |RSHFT | NUMS* |  =/#  |  +/* |
            bindings = <
&kp ESC   &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                            &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &fslh_bslh
&kp TAB   &kp Q  &kp W    &kp F    &kp P     &kp B                             &kp J  &kp L     &kp U     &kp Y    &qmark_excl &sqt_dqt
&kp CAPS  &kp A  &kp R    &kp S    &kp T     &kp G                             &kp M  &kp N     &kp E     &kp I    &kp O    &kp BSPC
&kp LCTRL &kp Z  &kp X    &kp C    &kp D     &kp V       &kp PSCRN  &kp PAUSE_BREAK &kp K &kp H &comma_semi &dot_colon &minus_under &kp DEL
                 &kp LGUI &kp LALT &mo SYMBOLS &kp LSHFT &kp SPACE  &lt MOVEMENT RET  &kp RSHFT MO_TOG(NUMPAD,NUMPAD) &equal_hash &plus_mult
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        movement_layer {
            display-name = "mvnt";
// ------------------------------------------------------------------------------------------------------------
// |   t   |      |      |       |       |      |                |      |      |  PGUP |      |       |       |
// |   t   |      |      |       |       |      |                |      |      |   ^   |      |       |  INS  |
// |   t   | WIN  | ALT  | CTRL  | SHIFT |      |                | HOME |   <- |   v   |  ->  |  END  |   t   |
// |   t   | UNDO | CUT  | COPY  | PASTE |PASTE |   t  |  |   t  |      |      |  PGDN |      |       |   t   |
//                |  t   |   t   |   t   |   t  |   t  |  |   t  |   t  |   t  |       |      |
            bindings = <
&trans     &none        &none        &none        &none        &none                         &none     &none     &kp PG_UP &none     &none   &none
&trans     &none        &kp PSCRN    &none        &none        &none                         &none     &none     &kp UP    &none     &none   &kp INS
&trans     &kp K_CMENU  &kp LALT     &kp LCTRL    &kp LSHFT    &none                         &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END &trans
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &kp K_PASTE   &trans  &trans  &none     &none     &kp PG_DN &none     &none   &trans
                        &trans       &trans       &trans       &trans        &trans  &trans  &trans    &none     &none     &none
            >;
            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numpad_layer {
            display-name = "numpad";
// -------------------------------------------------------------------------------------------------------------------------
// |    t   |         |         |         |         |         |               |      |   7  |   8   |  9   |   /   |   t   |
// |    t   |         |         |         |         |         |               |      |   4  |   5   |  6   |   *   |   t   |
// |    t   |   WIN   |   ALT   |   CTRL  |  SHIFT  |         |               |      |   1  |   2   |  3   |   +   |   t   |
// |    t   |   UNDO  |   CUT   |   COPY  |  PASTE  |  PASTE  |   t  | |  t   |      |   ,  |   0   |  .   |   -   |   t   |
//               t    |    t    |     t   |    t    |    t    |   t  | |  t   |   t  |   t  |       |      |
            bindings = <
&trans   &none    &none    &none    &none    &none                         &none  &kp N7  &kp N8    &kp N9   &kp FSLH        &trans
&trans   &none    &none    &none    &none    &none                         &none  &kp N4  &kp N5    &kp N6   &kp KP_MULTIPLY &trans
&trans   &kp K_CMENU &kp LALT  &kp LCTRL  &kp LSHFT   &none                &none  &kp N1  &kp N2    &kp N3   &kp KP_PLUS     &trans
&trans   &kp K_UNDO  &kp K_CUT &kp K_COPY &kp K_PASTE &kp K_PASTE &trans &trans &none &kp COMMA &kp N0 &kp DOT  &kp MINUS    &trans
                  &trans   &trans   &trans   &trans     &trans    &trans   &trans &trans  &kp none &kp none 
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        symbol_layer {
            display-name = "symbols";
// -------------------------------------------------------------------------------------------------------------------------
// |    t   |         |         |         |         |         |               |      |      |       |      |       |       |
// |    t   |    @    |     °   |    Ö    |     `   |    ^    |               | F12  |  F7  |  F8   |  F9  |       |       |
// |    t   |    %    |     ä   |    ö    |     ü   |    ß    |               | F11  |  F4  |  F5   |  F6  |       |       |
// |    t   |    €    |     $   |    &    |     |   |    ~    |   t  | |   t  | F10  |  F1  |  F2   |  F3  |       |       |
//                    |     t   |    t    |     t   |    t    |   t  | |   t  |   t  |   t  |       |      |
            bindings = <
&trans   &none    &_AE     &_OE     &_UE     &none                         &none   &none   &none     &none    &none  &trans
&trans   &kp AT   &deg     &_OE     &btick   &kp CARET                     &kp F12 &kp F7  &kp F8    &kp F9   &none  &trans
&trans   &kp PRCNT &ae_AE  &oe_OE   &ue_UE   &ss                         &kp F11 &kp F4  &kp F5    &kp F6   &none  &trans
&trans   &euro    &kp DLLR &kp AMPS &kp PIPE &kp TILDE  &trans    &trans   &kp F10 &kp F1  &kp F2    &kp F3   &none  &trans
                  &trans   &trans   &trans   &trans     &trans    &trans   &trans  &trans  &none     &none 
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

        service_layer {
            display-name = "service_layer";
// ----------------------------------------------------------------------------------------------------------------------------
// | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |         |                  |      |      |       |      |       |       |
// | CLR ALL|         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         |         | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |
            bindings = <
&bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &none                                   &none &none &none   &none     &none  &none
&bt BT_CLR_ALL    &none           &none           &none           &none           &none                                   &none &none &none   &none     &none  &none
&none             &none           &none           &none           &none           &none                                   &none &none &none   &none     &none  &none
&none             &none           &none           &none           &none           &none            &none           &none  &none &none &none   &none     &none  &none
                                  &none           &none           &none           &none            &none           &none  &none &none &none   &none
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
        };

    };
};
